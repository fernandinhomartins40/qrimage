name: 🚀 Deploy Incremental Inteligente - QRImage

# Controle de concorrência
concurrency:
  group: qrimage-deploy
  cancel-in-progress: true

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  VPS_HOST: '82.25.69.57'
  VPS_USER: 'root'
  DEPLOY_DIR: '/opt/qrimage'
  APP_NAME: 'qrimage'
  APP_PORT: '3020'

jobs:
  analyze-changes:
    name: 🔍 Analisar Mudanças
    runs-on: ubuntu-latest
    outputs:
      has_code_changes: ${{ steps.changes.outputs.has_code_changes }}
      has_package_changes: ${{ steps.changes.outputs.has_package_changes }}
      has_config_changes: ${{ steps.changes.outputs.has_config_changes }}
      needs_restart: ${{ steps.changes.outputs.needs_restart }}
      deploy_type: ${{ steps.changes.outputs.deploy_type }}
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: 🔍 Analisar arquivos alterados
      id: changes
      run: |
        echo "🔍 Analisando mudanças desde o último commit..."
        
        # Obter arquivos alterados
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "all")
        echo "📁 Arquivos alterados:"
        echo "$CHANGED_FILES"
        
        # Inicializar flags
        HAS_CODE=false
        HAS_PACKAGE=false
        HAS_CONFIG=false
        NEEDS_RESTART=false
        
        # Analisar tipos de mudanças
        if echo "$CHANGED_FILES" | grep -E "(src/.*\.(tsx|ts|json|css)|vite\.config\.ts)" > /dev/null; then
          HAS_CODE=true
          echo "✅ Mudanças de código detectadas"
        fi
        
        if echo "$CHANGED_FILES" | grep -E "package(-lock)?\.json" > /dev/null; then
          HAS_PACKAGE=true
          echo "📦 Mudanças em dependências detectadas"
        fi
        
        if echo "$CHANGED_FILES" | grep -E "(Dockerfile|docker-compose\.yml|nginx\.conf|\.env|\.github/workflows)" > /dev/null; then
          HAS_CONFIG=true
          echo "⚙️ Mudanças de configuração detectadas"
        fi
        
        # Determinar se precisa restart (sempre restart para garantir deploy)
        if [[ "$HAS_CODE" == "true" || "$HAS_CONFIG" == "true" || "$HAS_PACKAGE" == "true" ]]; then
          NEEDS_RESTART=true
        fi
        
        # Determinar tipo de deploy
        if [[ "$HAS_PACKAGE" == "true" ]]; then
          DEPLOY_TYPE="full"
          echo "🔄 Deploy completo necessário (dependências mudaram)"
        elif [[ "$HAS_CODE" == "true" ]]; then
          DEPLOY_TYPE="code-only"
          echo "📝 Deploy apenas de código"
        elif [[ "$HAS_CONFIG" == "true" ]]; then
          DEPLOY_TYPE="config-only"
          echo "⚙️ Deploy apenas de configuração"
        else
          DEPLOY_TYPE="minimal"
          echo "📋 Deploy mínimo (docs/workflows)"
        fi
        
        # Definir outputs
        echo "has_code_changes=$HAS_CODE" >> $GITHUB_OUTPUT
        echo "has_package_changes=$HAS_PACKAGE" >> $GITHUB_OUTPUT
        echo "has_config_changes=$HAS_CONFIG" >> $GITHUB_OUTPUT
        echo "needs_restart=$NEEDS_RESTART" >> $GITHUB_OUTPUT
        echo "deploy_type=$DEPLOY_TYPE" >> $GITHUB_OUTPUT

  deploy:
    name: 🚀 Deploy Incremental
    runs-on: ubuntu-latest
    needs: analyze-changes
    timeout-minutes: 15
    
    steps:
    - name: 📋 Info do Deploy Incremental
      run: |
        echo "🚀 Deploy Incremental Inteligente - QRImage"
        echo "=============================================="
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Tipo de Deploy: ${{ needs.analyze-changes.outputs.deploy_type }}"
        echo "Mudanças de Código: ${{ needs.analyze-changes.outputs.has_code_changes }}"
        echo "Mudanças de Dependências: ${{ needs.analyze-changes.outputs.has_package_changes }}"
        echo "Precisa Restart: ${{ needs.analyze-changes.outputs.needs_restart }}"
        echo "=============================================="

    - name: 🔑 Configurar SSH
      run: |
        echo "🔑 Configurando SSH para deploy incremental..."
        sudo apt-get update && sudo apt-get install -y sshpass
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts
        echo "✅ SSH configurado"

    - name: 🔍 Verificar estado atual da VPS
      run: |
        echo "🔍 Verificando estado atual..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          echo '=== Estado Atual da VPS ==='
          echo 'Container Docker:'
          docker ps --filter "name=${{ env.APP_NAME }}" --format "table {{.Names}}\t{{.Status}}" || echo 'Não rodando'
          
          echo ''
          echo 'Dados preservados:'
          if docker exec ${{ env.APP_NAME }} ls /app/uploads >/dev/null 2>&1; then
            FILES=\$(docker exec ${{ env.APP_NAME }} find /app/uploads -type f | wc -l 2>/dev/null || echo '0')
            echo \"📊 \$FILES arquivos preservados\"
          else
            echo '📋 Nenhum arquivo (diretório não existe)'
          fi
          
          echo ''
          echo 'Última atualização:'
          cd ${{ env.DEPLOY_DIR }} && git log --oneline -1 2>/dev/null || echo 'Repositório não inicializado'
        "

    - name: 📦 Backup Inteligente (somente se necessário)
      if: needs.analyze-changes.outputs.deploy_type == 'full'
      run: |
        echo "📦 Fazendo backup completo (deploy full)..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          TIMESTAMP=\$(date +%Y%m%d_%H%M%S)
          BACKUP_DIR=/opt/qrimage-backups/backup_\$TIMESTAMP
          mkdir -p \$BACKUP_DIR
          
          # Backup crítico sempre
          if docker exec ${{ env.APP_NAME }} ls /app/uploads >/dev/null 2>&1; then
            docker exec ${{ env.APP_NAME }} tar -czf /tmp/uploads_backup.tar.gz /app/uploads 2>/dev/null
            docker cp ${{ env.APP_NAME }}:/tmp/uploads_backup.tar.gz \$BACKUP_DIR/
            echo '✅ uploads backed up'
          fi
          
          echo \"📦 Backup completo criado: \$BACKUP_DIR\"
        "

    - name: 📦 Backup Rápido (somente dados críticos)
      if: needs.analyze-changes.outputs.deploy_type != 'full'
      run: |
        echo "📦 Backup rápido (apenas uploads)..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          if docker exec ${{ env.APP_NAME }} ls /app/uploads >/dev/null 2>&1; then
            docker exec ${{ env.APP_NAME }} tar -czf /tmp/uploads_backup.tar.gz /app/uploads 2>/dev/null || true
            echo '✅ uploads preservados'
          fi
        "

    - name: 🔄 Atualização Incremental do Código
      run: |
        echo "🔄 Atualizando código via git pull incremental..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          # Criar diretório se não existir
          mkdir -p ${{ env.DEPLOY_DIR }}
          cd ${{ env.DEPLOY_DIR }}
          
          # Verificar se repositório existe
          if [ ! -d .git ]; then
            echo '🆕 Primeira vez: preparando diretório...'
            
            # Se diretório não está vazio, limpar primeiro
            if [ \"\$(ls -A .)\" ]; then
              echo '🧹 Limpando diretório existente...'
              rm -rf * .* 2>/dev/null || true
            fi
            
            echo '📥 Clonando repositório...'
            git clone https://github.com/${{ github.repository }}.git .
          else
            echo '📥 Fazendo pull incremental das mudanças...'
            
            # Salvar status atual
            git stash push -m 'Auto-stash before deploy' 2>/dev/null || true
            
            # Pull incremental
            git fetch origin
            BEFORE=\$(git rev-parse HEAD)
            git pull origin main
            AFTER=\$(git rev-parse HEAD)
            
            if [ \"\$BEFORE\" != \"\$AFTER\" ]; then
              echo \"✅ Código atualizado: \$BEFORE -> \$AFTER\"
            else
              echo '📋 Código já atualizado'
            fi
          fi
        "

    - name: 🔄 Restaurar Dados Preservados
      run: |
        echo "🔄 Garantindo preservação dos dados..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.DEPLOY_DIR }}
          
          # Restaurar instances.json se foi perdido no git pull
          if [ ! -f src/instances.json ] && [ -f /tmp/instances_backup.json ]; then
            mkdir -p src
            cp /tmp/instances_backup.json src/instances.json
            echo '✅ instances.json restaurado do backup rápido'
          elif [ -f src/instances.json ]; then
            echo '✅ instances.json já presente'
          fi
          
          # Verificar se backup completo existe e restaurar se necessário
          LATEST_BACKUP=\$(ls -t /opt/supabase-manager-backups/backup_* 2>/dev/null | head -1 || echo '')
          if [ ! -f src/instances.json ] && [ -n \"\$LATEST_BACKUP\" ] && [ -f \"\$LATEST_BACKUP/instances.json\" ]; then
            mkdir -p src
            cp \"\$LATEST_BACKUP/instances.json\" src/instances.json
            echo '✅ instances.json restaurado do backup completo'
          fi
          
          echo '🛡️ Dados críticos preservados'
        "

    - name: 📦 Verificar Necessidade de Rebuild
      run: |
        if [ '${{ needs.analyze-changes.outputs.has_package_changes }}' == 'true' ]; then
          echo "📦 Rebuild necessário (package.json mudou)"
          echo "🔨 Docker build será executado sem cache"
        else
          echo "📦 Usando cache (package.json não mudou)"
          echo "⚡ Deploy mais rápido!"
        fi

    - name: 🔄 Restart Inteligente da Aplicação
      if: needs.analyze-changes.outputs.needs_restart == 'true'
      run: |
        echo "🔄 Reiniciando container (código/config mudou)..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.DEPLOY_DIR }}
          
          # Parar container antigo se existir
          docker stop ${{ env.APP_NAME }} 2>/dev/null || true
          docker rm ${{ env.APP_NAME }} 2>/dev/null || true
          
          # Build da imagem se houve mudanças
          if [ '${{ needs.analyze-changes.outputs.has_package_changes }}' == 'true' ]; then
            echo '🔨 Rebuilding Docker image...'
            docker build -t ${{ env.APP_NAME }}:latest . --no-cache
          else
            echo '⚡ Usando imagem em cache'
            docker build -t ${{ env.APP_NAME }}:latest . 2>/dev/null || docker build -t ${{ env.APP_NAME }}:latest . --no-cache
          fi
          
          # Iniciar novo container
          docker run -d \\\
            --name ${{ env.APP_NAME }} \\\
            --restart unless-stopped \\\
            -p ${{ env.APP_PORT }}:80 \\\
            -e VITE_SUPABASE_URL=http://82.25.69.57:8176 \\\
            -e VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlzcyI6InN1cGFiYXNlLWluc3RhbmNlLW1hbmFnZXIiLCJpYXQiOjE3NTM0NjgyMDMsImV4cCI6MTc4NTAwNDIwM30.pvtIAW0hu1UU7UWF5DDmpysMHDynOVyVWHKvJoTLcDo \\\
            -e VITE_SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoic2VydmljZV9yb2xlIiwiaXNzIjoic3VwYWJhc2UtaW5zdGFuY2UtbWFuYWdlciIsImlhdCI6MTc1MzQ2ODIwMywiZXhwIjoxNzg1MDA0MjAzfQ.fMpWWzhu8JWQVvoodlnU5_xc1kE7ZlaU8vSjHNEIixg \\\
            ${{ env.APP_NAME }}:latest
          
          echo '✅ Container atualizado'
        "

    - name: 📋 Skip Restart (não necessário)
      if: needs.analyze-changes.outputs.needs_restart == 'false'
      run: |
        echo "📋 Restart não necessário, mas verificando se container existe..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.DEPLOY_DIR }}
          
          # Verificar se container existe
          if ! docker ps | grep -q ${{ env.APP_NAME }}; then
            echo '🚀 Container não encontrado, criando...'
            
            # Parar e remover container antigo se existir
            docker stop ${{ env.APP_NAME }} 2>/dev/null || true
            docker rm ${{ env.APP_NAME }} 2>/dev/null || true
            
            # Build da imagem
            docker build -t ${{ env.APP_NAME }}:latest . 2>/dev/null || docker build -t ${{ env.APP_NAME }}:latest . --no-cache
            
            # Iniciar container
            docker run -d \\\
              --name ${{ env.APP_NAME }} \\\
              --restart unless-stopped \\\
              -p ${{ env.APP_PORT }}:80 \\\
              -e VITE_SUPABASE_URL=http://82.25.69.57:8176 \\\
              -e VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlzcyI6InN1cGFiYXNlLWluc3RhbmNlLW1hbmFnZXIiLCJpYXQiOjE3NTM0NjgyMDMsImV4cCI6MTc4NTAwNDIwM30.pvtIAW0hu1UU7UWF5DDmpysMHDynOVyVWHKvJoTLcDo \\\
              -e VITE_SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoic2VydmljZV9yb2xlIiwiaXNzIjoic3VwYWJhc2UtaW5zdGFuY2UtbWFuYWdlciIsIklhdCI6MTc1MzQ2ODIwMywiZXhwIjoxNzg1MDA0MjAzfQ.fMpWWzhu8JWQVvoodlnU5_xc1kE7ZlaU8vSjHNEIixg \\\
              ${{ env.APP_NAME }}:latest
              
            echo '✅ Container criado'
          else
            echo '✅ Container já está rodando'
          fi
        "

    - name: ⏳ Aguardar Estabilização
      if: needs.analyze-changes.outputs.needs_restart == 'true'
      run: |
        echo "⏳ Aguardando container estabilizar após restart..."
        sleep 15

    - name: 🔍 Verificação Rápida
      run: |
        echo "🔍 Verificação final..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          # Verificar PM2
          if docker ps | grep -q ${{ env.APP_NAME }}; then
            echo '✅ Container rodando'
          else
            echo '❌ Container não encontrado'
            exit 1
          fi
          
          # Verificar health check rápido
          for i in {1..3}; do
            if curl -f -s http://localhost:${{ env.APP_PORT }}/health >/dev/null 2>&1; then
              echo '✅ Health check OK'
              break
            else
              echo \"⏳ Tentativa \$i/3...\"
              sleep 5
            fi
            
            if [ \$i -eq 3 ]; then
              echo '⚠️ Health check demorou, mas Container está rodando'
            fi
          done
        "

    - name: 📊 Relatório do Deploy Incremental
      if: always()
      run: |
        echo "📊 RELATÓRIO DO DEPLOY INCREMENTAL"
        echo "=================================="
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          echo 'Tipo de Deploy: ${{ needs.analyze-changes.outputs.deploy_type }}'
          echo 'Restart Executado: ${{ needs.analyze-changes.outputs.needs_restart }}'
          echo 'Dependências Atualizadas: ${{ needs.analyze-changes.outputs.has_package_changes }}'
          echo ''
          
          echo '=== Status da Aplicação ==='
          docker ps --filter "name=${{ env.APP_NAME }}" --format "table {{.Names}}\t{{.Status}}" || echo 'Container não encontrado'
          
          echo ''
          echo '=== Dados Preservados ==='
          if docker exec ${{ env.APP_NAME }} ls /app/uploads >/dev/null 2>&1; then
            FILES=\$(docker exec ${{ env.APP_NAME }} find /app/uploads -type f | wc -l 2>/dev/null || echo '0')
            echo \"📊 \$FILES arquivos preservados\"
          else
            echo 'Nenhum arquivo encontrado'
          fi
          
          echo ''
          echo '=== Último Commit ==='
          cd ${{ env.DEPLOY_DIR }} && git log --oneline -1
          
          echo ''
          echo '🎯 QRImage App: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/'
          echo '⚡ Deploy incremental concluído!'
        "

    - name: 🎉 Deploy Incremental Concluído
      run: |
        echo "🎉 DEPLOY INCREMENTAL REALIZADO COM SUCESSO!"
        echo "⚡ Tipo: ${{ needs.analyze-changes.outputs.deploy_type }}"
        echo "🛡️ Dados preservados: SIM"
        echo "🚀 QRImage App: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/" 